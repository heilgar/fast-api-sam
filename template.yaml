AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: FastAPI SAM

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 15
    MemorySize: 128
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, prod]
  Version:
    Type: String
    Default: 0.0.1

Resources:
  # Api Secret
  ApiTokenSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}-${Version}-${Environment}-API-TOKEN'
      SecretString: 'Change me'
  
  # DB Secret for FastAPI
  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}-${Version}-${Environment}-DB-URI'
      SecretString: 'Change me'

  # Role
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-${Version}-${Environment}-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [ "lambda.amazonaws.com", "apigateway.amazonaws.com" ]
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokeLambdaFunction
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
        - PolicyName: AllowSecretsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref ApiTokenSecret
                  - !Ref DBSecret
        - PolicyName: LogGroupAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'

  # Api Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: ApiGateway
      StageName: !Sub ${Environment}
      CacheClusterEnabled: false # Disable authorizer cache
      DefinitionBody:
        openapi: '3.0'
        info: { }
        paths:
          /v1/items:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiGatewayFunction.Arn}/invocations
              responses: { }
              security:
                - AuthorizerFunction: [ ]
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiGatewayFunction.Arn}/invocations
              responses: { }
              security:
                - AuthorizerFunction: [ ]
          /v1/items/{item_id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiGatewayFunction.Arn}/invocations
              responses: { }
              security:
                - AuthorizerFunction: [ ]
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiGatewayFunction.Arn}/invocations
              responses: { }
              security:
                - AuthorizerFunction: [ ]
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiGatewayFunction.Arn}/invocations
              responses: { }
              security:
                - AuthorizerFunction: [ ]
          /docs:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiGatewayFunction.Arn}/invocations
              responses: { }
              security: []
          /openapi.json:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiGatewayFunction.Arn}/invocations
              responses: { }
              security: []
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        MaxAge: 5
      Auth:
        InvokeRole: !Ref IAMRole
        DefaultAuthorizer: AuthorizerFunction
        Authorizers:
          AuthorizerFunction:
            FunctionArn: !GetAtt ApiGatewayAuthorizerFunction.Arn
            FunctionInvokeRole: !GetAtt IAMRole.Arn
            FunctionPayloadType: REQUEST
            Identity:
              Headers:
                - 'x-api-key'

  # FastAPI Function
  ApiGatewayFunction:
    Type: AWS::Serverless::Function
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: .
      DockerTag: latest
    Properties:
      FunctionName: !Sub "${Environment}-${AWS::StackName}-FastAPI"
      Description: !Sub
        - ${ResourceName} From Stack ${AWS::StackName} Stage ${Environment}
        - ResourceName: ApiGatewayFunction
      PackageType: Image
      ImageConfig:
        Command: [ "main.handler" ]
      Architectures:
        - arm64
      MemorySize: 128
      Timeout: 10
      Tracing: Active
      Role: !GetAtt IAMRole.Arn
      Environment:
        Variables:
          DB_URL: ''
          SECRET_NAME: !Sub '${AWS::StackName}-${Version}-${Environment}-DB-URI'
      Events:
        ApiGatewayGETdocs:
          Type: Api
          Properties:
            Path: /docs
            Method: GET
            RestApiId: !Ref ApiGateway
            Auth:
              Authorizer: NONE
        ApiGatewayGETopenapijson:
          Type: Api
          Properties:
            Path: /openapi.json
            Method: GET
            RestApiId: !Ref ApiGateway
            Auth:
              Authorizer: NONE
        ApiGatewayGETv1items:
          Type: Api
          Properties:
            Path: /v1/items
            Method: GET
            RestApiId: !Ref ApiGateway
        ApiGatewayPOSTv1items:
          Type: Api
          Properties:
            Path: /v1/items
            Method: POST
            RestApiId: !Ref ApiGateway
        ApiGatewayGETv1itemsitemid:
          Type: Api
          Properties:
            Path: /v1/items/{items_id}
            Method: GET
            RestApiId: !Ref ApiGateway
        ApiGatewayPUTv1itemsitemid:
          Type: Api
          Properties:
            Path: /v1/items/{items_id}
            Method: PUT
            RestApiId: !Ref ApiGateway
        ApiGatewayDELETEv1itemsitemid:
          Type: Api
          Properties:
            Path: /v1/items/{items_id}
            Method: DELETE
            RestApiId: !Ref ApiGateway

  # Api Authorizer
  ApiGatewayAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - ${ResourceName} From Stack ${AWS::StackName} Stage
        - ResourceName: ApiGatewayAuthorizerFunction
      CodeUri: authorizer
      Handler: main.handler
      Runtime: python3.10
      MemorySize: 128
      Timeout: 5
      Tracing: Active
      Role: !GetAtt IAMRole.Arn
      Environment:
        Variables:
          SECRET_NAME: !Sub '${AWS::StackName}-${Version}-${Environment}-API-TOKEN'

Outputs:
  AppApiGateway:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/"
  AppFunction:
    Description: API Lambda Function ARN
    Value: !GetAtt ApiGatewayFunction.Arn
  AppFunctionIamRole:
    Description: Implicit IAM Role created for API function
    Value: !GetAtt IAMRole.Arn
  DBSecretName:
    Description: Database URL Secret Name
    Value: !Ref DBSecret
  ApiTokenSecretName:
    Description: Database URL Secret Name
    Value: !Ref ApiTokenSecret

Metadata:
  AWS::CloudFormation::Stack:
    Transform: 'AWS::Serverless-2016-10-31'
    Capabilities:
      - CAPABILITY_NAMED_IAM
